package com.hethong.baotri.dich_vu.nguoi_dung;

import com.hethong.baotri.kho_du_lieu.nguoi_dung.NguoiDungRepository;
import com.hethong.baotri.thuc_the.nguoi_dung.NguoiDung;
import com.hethong.baotri.thuc_the.nguoi_dung.VaiTro;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

@Service
@RequiredArgsConstructor
@Slf4j
public class CustomUserDetailsService implements UserDetailsService {

    private final NguoiDungRepository nguoiDungRepository;

    @Override
    @Transactional
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        log.info("üîç Loading user details for username: [{}]", username);

        // ‚úÖ T√¨m user trong database
        NguoiDung nguoiDung = nguoiDungRepository.findByTenDangNhap(username)
                .orElseThrow(() -> {
                    log.error("‚ùå User not found: [{}]", username);
                    return new UsernameNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: " + username);
                });

        log.info("üë§ Found user: [{}] - Active: [{}]", nguoiDung.getTenDangNhap(), nguoiDung.getTrangThaiHoatDong());

        // ‚úÖ Load authorities t·ª´ vai tr√≤
        Collection<? extends GrantedAuthority> authorities = getAuthorities(nguoiDung);

        log.info("üé≠ Loaded authorities for [{}]: {}", username, authorities);

        // ‚úÖ C·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi
        try {
            nguoiDung.capNhatLanDangNhapCuoi();
            nguoiDungRepository.save(nguoiDung);
            log.debug("‚úÖ Updated last login time for user: [{}]", username);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not update last login time: {}", e.getMessage());
        }

        // ‚úÖ T·∫°o UserDetails - QUAN TR·ªåNG: Kh√¥ng check account status qu√° strict
        return User.builder()
                .username(nguoiDung.getTenDangNhap())
                .password(nguoiDung.getMatKhau())
                .authorities(authorities)
                .accountExpired(false)  // ‚úÖ S·ª¨A: Kh√¥ng block account expired
                .accountLocked(false)   // ‚úÖ S·ª¨A: Kh√¥ng block account locked
                .credentialsExpired(false)  // ‚úÖ S·ª¨A: Kh√¥ng block credentials expired
                .disabled(!nguoiDung.getTrangThaiHoatDong())  // Ch·ªâ check active status
                .build();
    }

    /**
     * ‚úÖ Load authorities t·ª´ vai tr√≤ c·ªßa user - S·ª¨A ƒë·ªÉ support t·∫•t c·∫£ user
     */
    private Collection<? extends GrantedAuthority> getAuthorities(NguoiDung nguoiDung) {
        Set<GrantedAuthority> authorities = new HashSet<>();

        // ‚úÖ Th√™m vai tr√≤ t·ª´ database
        if (nguoiDung.getVaiTroSet() != null && !nguoiDung.getVaiTroSet().isEmpty()) {
            for (VaiTro vaiTro : nguoiDung.getVaiTroSet()) {
                String roleName = vaiTro.getTenVaiTro();
                log.debug("‚ûï Adding role authority: [{}]", roleName);
                authorities.add(new SimpleGrantedAuthority(roleName));

                // ‚úÖ Th√™m quy·ªÅn t·ª´ vai tr√≤
                if (vaiTro.getQuyenSet() != null) {
                    vaiTro.getQuyenSet().forEach(quyen -> {
                        String quyenName = quyen.getTenQuyen();
                        log.debug("‚ûï Adding permission authority: [{}]", quyenName);
                        authorities.add(new SimpleGrantedAuthority(quyenName));
                    });
                }
            }
        }

        // ‚úÖ FALLBACK: N·∫øu kh√¥ng c√≥ role t·ª´ DB, t·∫°o default authorities
        if (authorities.isEmpty()) {
            log.warn("‚ö†Ô∏è User [{}] has no roles from DB, creating default authorities", nguoiDung.getTenDangNhap());

            String username = nguoiDung.getTenDangNhap().toLowerCase();

            // ‚úÖ Admin user
            if ("admin".equals(username)) {
                log.info("üîë Creating ADMIN authorities for user [{}]", username);
                authorities.add(new SimpleGrantedAuthority("QUAN_TRI_VIEN"));
                authorities.add(new SimpleGrantedAuthority("ADMIN"));
                authorities.add(new SimpleGrantedAuthority("QUAN_LY_NGUOI_DUNG_XEM"));
                authorities.add(new SimpleGrantedAuthority("QUAN_LY_NGUOI_DUNG_THEM"));
                authorities.add(new SimpleGrantedAuthority("QUAN_LY_NGUOI_DUNG_SUA"));
                authorities.add(new SimpleGrantedAuthority("QUAN_LY_NGUOI_DUNG_XOA"));
                authorities.add(new SimpleGrantedAuthority("XEM_THONG_KE_BAO_TRI")); // Th√™m quy·ªÅn m·ªõi
            }
            // ‚úÖ S·ª¨A: T·∫•t c·∫£ user kh√°c ƒë·ªÅu ƒë∆∞·ª£c ph√©p ƒëƒÉng nh·∫≠p v·ªõi quy·ªÅn USER
            else {
                log.info("üë§ Creating USER authorities for user [{}]", username);
                authorities.add(new SimpleGrantedAuthority("USER"));
                authorities.add(new SimpleGrantedAuthority("NGUOI_DUNG"));

                // ‚úÖ TH√äM: C√°c quy·ªÅn c∆° b·∫£n cho user th∆∞·ªùng
                authorities.add(new SimpleGrantedAuthority("XEM_TRANG_CHU"));
                authorities.add(new SimpleGrantedAuthority("XEM_DASHBOARD"));
                authorities.add(new SimpleGrantedAuthority("XEM_THONG_TIN_CA_NHAN"));
            }
        }

        // ‚úÖ QUAN TR·ªåNG: Lu√¥n th√™m quy·ªÅn truy c·∫≠p dashboard cho t·∫•t c·∫£ user
        authorities.add(new SimpleGrantedAuthority("ACCESS_DASHBOARD"));

        log.info("üé≠ Final authorities for [{}]: {}", nguoiDung.getTenDangNhap(), authorities);
        return authorities;
    }
}