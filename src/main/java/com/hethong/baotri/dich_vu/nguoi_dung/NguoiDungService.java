package com.hethong.baotri.dich_vu.nguoi_dung;

import com.hethong.baotri.kho_du_lieu.nguoi_dung.NguoiDungRepository;
import com.hethong.baotri.kho_du_lieu.nguoi_dung.VaiTroRepository;
import com.hethong.baotri.thuc_the.nguoi_dung.NguoiDung;
import com.hethong.baotri.thuc_the.nguoi_dung.VaiTro;
import com.hethong.baotri.dto.nguoi_dung.NguoiDungDTO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class NguoiDungService {

    private final NguoiDungRepository nguoiDungRepository;
    private final VaiTroRepository vaiTroRepository;
    private final PasswordEncoder passwordEncoder;
    private final ModelMapper modelMapper;

    /**
     * ‚úÖ T√åM NG∆Ø·ªúI D√ôNG THEO T√äN ƒêƒÇNG NH·∫¨P - TR·∫¢ V·ªÄ OPTIONAL
     */
    @Transactional(readOnly = true)
    public Optional<NguoiDung> timNguoiDungTheoTenDangNhap(String tenDangNhap) {
        log.debug("üîç T√¨m ng∆∞·ªùi d√πng theo t√™n ƒëƒÉng nh·∫≠p: {}", tenDangNhap);
        return nguoiDungRepository.findByTenDangNhap(tenDangNhap);
    }

    /**
     * ‚úÖ L·∫§Y NG∆Ø·ªúI D√ôNG THEO T√äN ƒêƒÇNG NH·∫¨P - TR·∫¢ V·ªÄ DTO
     */
    @Transactional(readOnly = true)
    public NguoiDungDTO layNguoiDungTheoTenDangNhap(String tenDangNhap) {
        log.debug("üîç L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo t√™n ƒëƒÉng nh·∫≠p: {}", tenDangNhap);

        NguoiDung nguoiDung = nguoiDungRepository.findByTenDangNhap(tenDangNhap)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi t√™n ƒëƒÉng nh·∫≠p: " + tenDangNhap));

        NguoiDungDTO dto = modelMapper.map(nguoiDung, NguoiDungDTO.class);

        // Th√™m th√¥ng tin vai tr√≤
        List<String> vaiTroList = nguoiDung.getVaiTroSet().stream()
                .map(VaiTro::getTenVaiTro)
                .collect(Collectors.toList());
        dto.setDanhSachVaiTro(vaiTroList);

        return dto;
    }

    /**
     * ‚úÖ ƒê·∫æM T·ªîNG S·ªê NG∆Ø·ªúI D√ôNG
     */
    @Transactional(readOnly = true)
    public Long demTongNguoiDung() {
        log.debug("üî¢ ƒê·∫øm t·ªïng s·ªë ng∆∞·ªùi d√πng");
        Long count = nguoiDungRepository.count();
        log.debug("üìä T·ªïng s·ªë ng∆∞·ªùi d√πng: {}", count);
        return count;
    }

    /**
     * ‚úÖ T√åM NG∆Ø·ªúI D√ôNG THEO ID
     */
    @Transactional(readOnly = true)
    public NguoiDungDTO timNguoiDungTheoId(Long id) {
        log.debug("üîç T√¨m ng∆∞·ªùi d√πng theo ID: {}", id);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ ID: " + id));

        NguoiDungDTO dto = modelMapper.map(nguoiDung, NguoiDungDTO.class);

        // Th√™m th√¥ng tin vai tr√≤
        List<String> vaiTroList = nguoiDung.getVaiTroSet().stream()
                .map(VaiTro::getTenVaiTro)
                .collect(Collectors.toList());
        dto.setDanhSachVaiTro(vaiTroList);

        return dto;
    }

    /**
     * ‚úÖ L·∫§Y DANH S√ÅCH NG∆Ø·ªúI D√ôNG (PH√ÇN TRANG)
     */
    @Transactional(readOnly = true)
    public Page<NguoiDungDTO> layDanhSachNguoiDung(Pageable pageable) {
        log.debug("üìã L·∫•y danh s√°ch ng∆∞·ªùi d√πng - page: {}, size: {}",
                pageable.getPageNumber(), pageable.getPageSize());

        Page<NguoiDung> nguoiDungPage = nguoiDungRepository.findAll(pageable);

        return nguoiDungPage.map(nguoiDung -> {
            NguoiDungDTO dto = modelMapper.map(nguoiDung, NguoiDungDTO.class);

            // Th√™m th√¥ng tin vai tr√≤
            List<String> vaiTroList = nguoiDung.getVaiTroSet().stream()
                    .map(VaiTro::getTenVaiTro)
                    .collect(Collectors.toList());
            dto.setDanhSachVaiTro(vaiTroList);

            return dto;
        });
    }

    /**
     * ‚úÖ T√åM KI·∫æM NG∆Ø·ªúI D√ôNG
     */
    @Transactional(readOnly = true)
    public Page<NguoiDungDTO> timKiemNguoiDung(String tuKhoa, Pageable pageable) {
        log.debug("üîç T√¨m ki·∫øm ng∆∞·ªùi d√πng v·ªõi t·ª´ kh√≥a: [{}]", tuKhoa);

        Page<NguoiDung> ketQua = nguoiDungRepository.timKiemNguoiDung(tuKhoa, pageable);

        return ketQua.map(nguoiDung -> {
            NguoiDungDTO dto = modelMapper.map(nguoiDung, NguoiDungDTO.class);

            // Th√™m th√¥ng tin vai tr√≤
            List<String> vaiTroList = nguoiDung.getVaiTroSet().stream()
                    .map(VaiTro::getTenVaiTro)
                    .collect(Collectors.toList());
            dto.setDanhSachVaiTro(vaiTroList);

            return dto;
        });
    }

    /**
     * ‚úÖ T·∫†O NG∆Ø·ªúI D√ôNG M·ªöI
     */
    public NguoiDungDTO taoNguoiDung(NguoiDungDTO nguoiDungDTO) {
        log.info("‚ûï T·∫°o ng∆∞·ªùi d√πng m·ªõi: {}", nguoiDungDTO.getTenDangNhap());

        try {
            // Ki·ªÉm tra tr√πng t√™n ƒëƒÉng nh·∫≠p
            if (nguoiDungRepository.existsByTenDangNhap(nguoiDungDTO.getTenDangNhap())) {
                throw new RuntimeException("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i: " + nguoiDungDTO.getTenDangNhap());
            }

            // Ki·ªÉm tra tr√πng email
            if (nguoiDungRepository.existsByEmail(nguoiDungDTO.getEmail())) {
                throw new RuntimeException("Email ƒë√£ t·ªìn t·∫°i: " + nguoiDungDTO.getEmail());
            }

            NguoiDung nguoiDung = modelMapper.map(nguoiDungDTO, NguoiDung.class);

            // M√£ h√≥a m·∫≠t kh·∫©u
            if (nguoiDungDTO.getMatKhau() != null && !nguoiDungDTO.getMatKhau().isEmpty()) {
                nguoiDung.setMatKhau(passwordEncoder.encode(nguoiDungDTO.getMatKhau()));
            } else {
                // M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
                nguoiDung.setMatKhau(passwordEncoder.encode("123456"));
            }

            // Thi·∫øt l·∫≠p c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
            nguoiDung.setTrangThaiHoatDong(true);
            nguoiDung.setTaiKhoanKhongBiKhoa(true);
            nguoiDung.setTaiKhoanKhongHetHan(true);
            nguoiDung.setThongTinDangNhapHopLe(true);
            nguoiDung.setSoLanDangNhapThatBai(0);
            nguoiDung.setNgayTao(LocalDateTime.now());

            // G√°n vai tr√≤ m·∫∑c ƒë·ªãnh (n·∫øu c·∫ßn)
            if (nguoiDungDTO.getDanhSachVaiTro() != null && !nguoiDungDTO.getDanhSachVaiTro().isEmpty()) {
                nguoiDung.getVaiTroSet().addAll(
                        nguoiDungDTO.getDanhSachVaiTro().stream()
                                .map(vaiTroTen -> vaiTroRepository.findByTenVaiTro(vaiTroTen)
                                        .orElseThrow(() -> new RuntimeException("Vai tr√≤ kh√¥ng t·ªìn t·∫°i: " + vaiTroTen)))
                                .collect(Collectors.toSet())
                );
            }

            NguoiDung savedNguoiDung = nguoiDungRepository.save(nguoiDung);
            log.info("‚úÖ T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng: {}", savedNguoiDung.getTenDangNhap());

            return modelMapper.map(savedNguoiDung, NguoiDungDTO.class);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi t·∫°o ng∆∞·ªùi d√πng: {}", e.getMessage(), e);
            throw new RuntimeException("L·ªói khi t·∫°o ng∆∞·ªùi d√πng: " + e.getMessage(), e);
        }
    }

    /**
     * ‚úÖ C·∫¨P NH·∫¨T NG∆Ø·ªúI D√ôNG
     */
    public NguoiDungDTO capNhatNguoiDung(Long id, NguoiDungDTO nguoiDungDTO) {
        log.info("üíæ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng ID: {}", id);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ ID: " + id));

        // C·∫≠p nh·∫≠t th√¥ng tin (kh√¥ng c·∫≠p nh·∫≠t password v√† username)
        nguoiDung.setHoVaTen(nguoiDungDTO.getHoVaTen());
        nguoiDung.setEmail(nguoiDungDTO.getEmail());
        nguoiDung.setSoDienThoai(nguoiDungDTO.getSoDienThoai());
        nguoiDung.setDiaChi(nguoiDungDTO.getDiaChi());
        nguoiDung.setNgayCapNhat(LocalDateTime.now());

        NguoiDung updatedNguoiDung = nguoiDungRepository.save(nguoiDung);
        log.info("‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng ID: {}", id);

        return modelMapper.map(updatedNguoiDung, NguoiDungDTO.class);
    }

    /**
     * ‚úÖ X√ìA NG∆Ø·ªúI D√ôNG
     */
    public void xoaNguoiDung(Long id) {
        log.info("üóëÔ∏è X√≥a ng∆∞·ªùi d√πng ID: {}", id);

        if (!nguoiDungRepository.existsById(id)) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ ID: " + id);
        }

        nguoiDungRepository.deleteById(id);
        log.info("‚úÖ X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng ID: {}", id);
    }

    /**
     * ‚úÖ L·∫§Y DANH S√ÅCH VAI TR√í C·ª¶A NG∆Ø·ªúI D√ôNG
     */
    @Transactional(readOnly = true)
    public List<String> layDanhSachVaiTro(String tenDangNhap) {
        log.debug("üîç L·∫•y danh s√°ch vai tr√≤ cho user: {}", tenDangNhap);

        Optional<NguoiDung> nguoiDung = nguoiDungRepository.findByTenDangNhap(tenDangNhap);

        if (nguoiDung.isPresent()) {
            return nguoiDung.get().getVaiTroSet().stream()
                    .map(VaiTro::getTenVaiTro)
                    .collect(Collectors.toList());
        }

        return List.of();
    }

    /**
     * ‚úÖ G·∫ÆN VAI TR√í CHO NG∆Ø·ªúI D√ôNG
     */
    public void ganVaiTro(Long userId, Long vaiTroId) {
        log.info("üîó G·∫Øn vai tr√≤ {} cho user ID: {}", vaiTroId, userId);

        NguoiDung nguoiDung = nguoiDungRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        VaiTro vaiTro = vaiTroRepository.findById(vaiTroId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y vai tr√≤"));

        nguoiDung.getVaiTroSet().add(vaiTro);
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ G·∫Øn vai tr√≤ th√†nh c√¥ng");
    }

    /**
     * ‚úÖ G·ª† VAI TR√í KH·ªéI NG∆Ø·ªúI D√ôNG
     */
    public void goVaiTro(Long userId, Long vaiTroId) {
        log.info("üîó G·ª° vai tr√≤ {} kh·ªèi user ID: {}", vaiTroId, userId);

        NguoiDung nguoiDung = nguoiDungRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        VaiTro vaiTro = vaiTroRepository.findById(vaiTroId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y vai tr√≤"));

        nguoiDung.getVaiTroSet().remove(vaiTro);
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ G·ª° vai tr√≤ th√†nh c√¥ng");
    }

    /**
     * ‚úÖ KI·ªÇM TRA VAI TR√í C·ª¶A NG∆Ø·ªúI D√ôNG
     */
    @Transactional(readOnly = true)
    public boolean kiemTraVaiTro(String tenDangNhap, String tenVaiTro) {
        log.debug("üîç Ki·ªÉm tra vai tr√≤ {} cho user: {}", tenVaiTro, tenDangNhap);

        Optional<NguoiDung> nguoiDungOpt = nguoiDungRepository.findByTenDangNhap(tenDangNhap);
        if (nguoiDungOpt.isPresent()) {
            return nguoiDungOpt.get().getVaiTroSet().stream()
                    .anyMatch(vaiTro -> vaiTro.getTenVaiTro().equals(tenVaiTro));
        }
        return false;
    }

    /**
     * ‚úÖ ƒê·∫æM T·ªîNG S·ªê NG∆Ø·ªúI D√ôNG
     */
    @Transactional(readOnly = true)
    public long demTongSoNguoiDung() {
        log.debug("üî¢ ƒê·∫øm t·ªïng s·ªë ng∆∞·ªùi d√πng");
        long count = nguoiDungRepository.count();
        log.debug("üìä T·ªïng s·ªë ng∆∞·ªùi d√πng: {}", count);
        return count;
    }

    /**
     * ‚úÖ ƒê·∫æM NG∆Ø·ªúI D√ôNG ƒêANG HO·∫†T ƒê·ªòNG
     */
    @Transactional(readOnly = true)
    public long demNguoiDungHoatDong() {
        log.debug("üî¢ ƒê·∫øm ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông");
        long count = nguoiDungRepository.countByTrangThaiHoatDong(true);
        log.debug("üìä S·ªë ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông: {}", count);
        return count;
    }

    /**
     * ‚úÖ C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI HO·∫†T ƒê·ªòNG
     */
    public void capNhatTrangThaiHoatDong(Long id, Boolean trangThaiHoatDong) {
        log.info("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông user ID: {} -> {}", id, trangThaiHoatDong);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        nguoiDung.setTrangThaiHoatDong(trangThaiHoatDong);
        nguoiDung.setNgayCapNhat(LocalDateTime.now());
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng");
    }

    /**
     * ‚úÖ KH√ìA T√ÄI KHO·∫¢N
     */
    public void khoaTaiKhoan(Long id) {
        log.info("üîí Kh√≥a t√†i kho·∫£n user ID: {}", id);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        nguoiDung.setTaiKhoanKhongBiKhoa(false);
        nguoiDung.setNgayCapNhat(LocalDateTime.now());
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ Kh√≥a t√†i kho·∫£n th√†nh c√¥ng");
    }

    /**
     * ‚úÖ M·ªû KH√ìA T√ÄI KHO·∫¢N
     */
    public void moKhoaTaiKhoan(Long id) {
        log.info("üîì M·ªü kh√≥a t√†i kho·∫£n user ID: {}", id);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        nguoiDung.setTaiKhoanKhongBiKhoa(true);
        nguoiDung.setSoLanDangNhapThatBai(0); // Reset failed attempts
        nguoiDung.setNgayCapNhat(LocalDateTime.now());
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ M·ªü kh√≥a t√†i kho·∫£n th√†nh c√¥ng");
    }

    /**
     * ‚úÖ ƒê·ªîI M·∫¨T KH·∫®U
     */
    public void doiMatKhau(Long id, String matKhauCu, String matKhauMoi) {
        log.info("üîë ƒê·ªïi m·∫≠t kh·∫©u user ID: {}", id);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        if (!passwordEncoder.matches(matKhauCu, nguoiDung.getMatKhau())) {
            throw new RuntimeException("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng");
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        nguoiDung.setMatKhau(passwordEncoder.encode(matKhauMoi));
        nguoiDung.setNgayCapNhat(LocalDateTime.now());
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
    }

    /**
     * ‚úÖ RESET M·∫¨T KH·∫®U (ADMIN)
     */
    public void resetMatKhau(Long id, String matKhauMoi) {
        log.info("üîÑ Reset m·∫≠t kh·∫©u user ID: {}", id);

        NguoiDung nguoiDung = nguoiDungRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        nguoiDung.setMatKhau(passwordEncoder.encode(matKhauMoi));
        nguoiDung.setSoLanDangNhapThatBai(0); // Reset failed attempts
        nguoiDung.setNgayCapNhat(LocalDateTime.now());
        nguoiDungRepository.save(nguoiDung);

        log.info("‚úÖ Reset m·∫≠t kh·∫©u th√†nh c√¥ng");
    }

    /**
     * ‚úÖ L·∫§Y NG∆Ø·ªúI D√ôNG C√ì TH·ªÇ PH√ÇN C√îNG
     */
    @Transactional(readOnly = true)
    public List<NguoiDungDTO> layNguoiDungCoThePhancong(String tenQuyen) {
        log.debug("üîç L·∫•y ng∆∞·ªùi d√πng c√≥ th·ªÉ ph√¢n c√¥ng v·ªõi quy·ªÅn: {}", tenQuyen);

        try {
            List<NguoiDung> nguoiDungList = nguoiDungRepository.layNguoiDungCoThePhancong(tenQuyen);

            return nguoiDungList.stream()
                    .map(nguoiDung -> modelMapper.map(nguoiDung, NguoiDungDTO.class))
                    .collect(Collectors.toList());
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y ng∆∞·ªùi d√πng c√≥ th·ªÉ ph√¢n c√¥ng: {}", e.getMessage());
            // Fallback: L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông
            List<NguoiDung> fallbackList = nguoiDungRepository.findByTrangThaiHoatDong(true, Pageable.unpaged()).getContent();
            return fallbackList.stream()
                    .map(nguoiDung -> modelMapper.map(nguoiDung, NguoiDungDTO.class))
                    .collect(Collectors.toList());
        }
    }

    /**
     * ‚úÖ TH·ªêNG K√ä NG∆Ø·ªúI D√ôNG THEO VAI TR√í
     */
    @Transactional(readOnly = true)
    public List<Object[]> thongKeNguoiDungTheoVaiTro() {
        log.debug("üìä Th·ªëng k√™ ng∆∞·ªùi d√πng theo vai tr√≤");

        try {
            return nguoiDungRepository.thongKeNguoiDungTheoVaiTro();
        } catch (Exception e) {
            log.error("L·ªói khi th·ªëng k√™ ng∆∞·ªùi d√πng theo vai tr√≤: {}", e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * ‚úÖ C·∫¨P NH·∫¨T L·∫¶N ƒêƒÇNG NH·∫¨P CU·ªêI
     */
    public void capNhatLanDangNhapCuoi(String tenDangNhap) {
        log.debug("üïí C·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi cho user: {}", tenDangNhap);

        try {
            Optional<NguoiDung> nguoiDungOpt = nguoiDungRepository.findByTenDangNhap(tenDangNhap);
            if (nguoiDungOpt.isPresent()) {
                NguoiDung nguoiDung = nguoiDungOpt.get();
                nguoiDung.setLanDangNhapCuoi(LocalDateTime.now());
                nguoiDung.setSoLanDangNhapThatBai(0); // Reset failed attempts on successful login
                nguoiDungRepository.save(nguoiDung);
                log.debug("‚úÖ C·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi th√†nh c√¥ng cho: {}", tenDangNhap);
            }
        } catch (Exception e) {
            log.error("L·ªói khi c·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi cho {}: {}", tenDangNhap, e.getMessage());
        }
    }

    /**
     * ‚úÖ X·ª¨ L√ù ƒêƒÇNG NH·∫¨P TH·∫§T B·∫†N
     */
    public void xuLyDangNhapThatBai(String tenDangNhap) {
        log.debug("‚ùå X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th·∫•t b·∫°i cho user: {}", tenDangNhap);

        try {
            Optional<NguoiDung> nguoiDungOpt = nguoiDungRepository.findByTenDangNhap(tenDangNhap);
            if (nguoiDungOpt.isPresent()) {
                NguoiDung nguoiDung = nguoiDungOpt.get();
                int failedAttempts = nguoiDung.getSoLanDangNhapThatBai() + 1;
                nguoiDung.setSoLanDangNhapThatBai(failedAttempts);

                // Kh√≥a t√†i kho·∫£n n·∫øu qu√° 5 l·∫ßn th·∫•t b·∫°i
                if (failedAttempts >= 5) {
                    nguoiDung.setTaiKhoanKhongBiKhoa(false);
                    log.warn("üîí T√†i kho·∫£n {} ƒë√£ b·ªã kh√≥a do ƒëƒÉng nh·∫≠p th·∫•t b·∫°i qu√° nhi·ªÅu l·∫ßn", tenDangNhap);
                }

                nguoiDungRepository.save(nguoiDung);
                log.debug("‚úÖ X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th·∫•t b·∫°i th√†nh c√¥ng cho: {}", tenDangNhap);
            }
        } catch (Exception e) {
            log.error("L·ªói khi x·ª≠ l√Ω ƒëƒÉng nh·∫≠p th·∫•t b·∫°i cho {}: {}", tenDangNhap, e.getMessage());
        }
    }
}