package com.hethong.baotri.dich_vu.email;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender javaMailSender;

    @Value("${spring.mail.username:noreply@baotri.edu.vn}")
    private String fromEmail;

    @Value("${app.email.enabled:true}")
    private boolean emailEnabled;

    /**
     * G·ª≠i email ƒë∆°n gi·∫£n
     */
    @Async
    public void guiEmailDonGian(String toEmail, String subject, String content) {
        if (!emailEnabled) {
            log.info("Email service is disabled. Skipping email to: {}", toEmail);
            return;
        }

        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject(subject);
            message.setText(content);

            javaMailSender.send(message);
            log.info("G·ª≠i email th√†nh c√¥ng ƒë·∫øn: {}", toEmail);
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i email ƒë·∫øn {}: {}", toEmail, e.getMessage());
        }
    }

    /**
     * G·ª≠i email HTML
     */
    @Async
    public void guiEmailHTML(String toEmail, String subject, String htmlContent) {
        if (!emailEnabled) {
            log.info("Email service is disabled. Skipping HTML email to: {}", toEmail);
            return;
        }

        try {
            MimeMessage message = javaMailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(toEmail);
            helper.setSubject(subject);
            helper.setText(htmlContent, true);

            javaMailSender.send(message);
            log.info("G·ª≠i email HTML th√†nh c√¥ng ƒë·∫øn: {}", toEmail);
        } catch (MessagingException e) {
            log.error("L·ªói khi g·ª≠i email HTML ƒë·∫øn {}: {}", toEmail, e.getMessage());
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o h·ªá th·ªëng
     */
    @Async
    public void guiEmailThongBao(String toEmail, String tieuDe, String noiDung) {
        String htmlContent = taoTemplateThongBao(tieuDe, noiDung);
        guiEmailHTML(toEmail, "[H·ªá th·ªëng B·∫£o tr√¨] " + tieuDe, htmlContent);
    }

    /**
     * G·ª≠i email cho nhi·ªÅu ng∆∞·ªùi
     */
    @Async
    public void guiEmailNhieuNguoi(List<String> danhSachEmail, String subject, String content) {
        if (!emailEnabled) {
            log.info("Email service is disabled. Skipping bulk email to {} recipients", danhSachEmail.size());
            return;
        }

        for (String email : danhSachEmail) {
            guiEmailDonGian(email, subject, content);
        }
    }

    /**
     * G·ª≠i email reset m·∫≠t kh·∫©u
     */
    @Async
    public void guiEmailResetMatKhau(String toEmail, String tenNguoiDung, String matKhauMoi) {
        String tieuDe = "Reset m·∫≠t kh·∫©u h·ªá th·ªëng b·∫£o tr√¨";
        String htmlContent = taoTemplateResetMatKhau(tenNguoiDung, matKhauMoi);

        guiEmailHTML(toEmail, tieuDe, htmlContent);
    }

    /**
     * G·ª≠i email ch√†o m·ª´ng ng∆∞·ªùi d√πng m·ªõi
     */
    @Async
    public void guiEmailChaoMung(String toEmail, String tenNguoiDung, String tenDangNhap, String matKhau) {
        String tieuDe = "Ch√†o m·ª´ng ƒë·∫øn v·ªõi h·ªá th·ªëng b·∫£o tr√¨ thi·∫øt b·ªã";
        String htmlContent = taoTemplateChaoMung(tenNguoiDung, tenDangNhap, matKhau);

        guiEmailHTML(toEmail, tieuDe, htmlContent);
    }

    /**
     * G·ª≠i email b√°o c√°o ƒë·ªãnh k·ª≥
     */
    @Async
    public void guiEmailBaoCaoTuan(String toEmail, String noiDungBaoCao) {
        String tieuDe = "B√°o c√°o ho·∫°t ƒë·ªông b·∫£o tr√¨ tu·∫ßn";
        String htmlContent = taoTemplateBaoCao(noiDungBaoCao);

        guiEmailHTML(toEmail, tieuDe, htmlContent);
    }

    // Template Methods

    private String taoTemplateThongBao(String tieuDe, String noiDung) {
        return String.format("""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>%s</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background-color: #007bff; color: white; padding: 20px; text-align: center; }
                    .content { padding: 20px; background-color: #f8f9fa; }
                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }
                    .btn { display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h2>H·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã</h2>
                    </div>
                    <div class="content">
                        <h3>%s</h3>
                        <p>%s</p>
                        <p>
                            <a href="http://localhost:8081/login" class="btn">ƒêƒÉng nh·∫≠p h·ªá th·ªëng</a>
                        </p>
                    </div>
                    <div class="footer">
                        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.</p>
                        <p>¬© 2024 H·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã</p>
                    </div>
                </div>
            </body>
            </html>
            """, tieuDe, tieuDe, noiDung.replace("\n", "<br>"));
    }

    private String taoTemplateResetMatKhau(String tenNguoiDung, String matKhauMoi) {
        return String.format("""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Reset M·∫≠t kh·∫©u</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background-color: #dc3545; color: white; padding: 20px; text-align: center; }
                    .content { padding: 20px; background-color: #f8f9fa; }
                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }
                    .password { background-color: #e9ecef; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 16px; }
                    .warning { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 15px 0; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h2>üîê Reset M·∫≠t kh·∫©u</h2>
                    </div>
                    <div class="content">
                        <p>Xin ch√†o <strong>%s</strong>,</p>
                        <p>M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng. Th√¥ng tin ƒëƒÉng nh·∫≠p m·ªõi:</p>
                        
                        <div class="password">
                            <strong>M·∫≠t kh·∫©u m·ªõi:</strong> %s
                        </div>
                        
                        <div class="warning">
                            <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                            <ul>
                                <li>Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u ngay sau khi ƒëƒÉng nh·∫≠p</li>
                                <li>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi b·∫•t k·ª≥ ai</li>
                                <li>S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh khi thay ƒë·ªïi</li>
                            </ul>
                        </div>
                        
                        <p>
                            <a href="http://localhost:8081/login" style="display: inline-block; padding: 10px 20px; background-color: #dc3545; color: white; text-decoration: none; border-radius: 5px;">ƒêƒÉng nh·∫≠p ngay</a>
                        </p>
                    </div>
                    <div class="footer">
                        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu reset m·∫≠t kh·∫©u, vui l√≤ng li√™n h·ªá admin ngay l·∫≠p t·ª©c.</p>
                        <p>¬© 2024 H·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã</p>
                    </div>
                </div>
            </body>
            </html>
            """, tenNguoiDung, matKhauMoi);
    }

    private String taoTemplateChaoMung(String tenNguoiDung, String tenDangNhap, String matKhau) {
        return String.format("""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Ch√†o m·ª´ng</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background-color: #28a745; color: white; padding: 20px; text-align: center; }
                    .content { padding: 20px; background-color: #f8f9fa; }
                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }
                    .credentials { background-color: #e9ecef; padding: 15px; border-radius: 5px; margin: 15px 0; }
                    .btn { display: inline-block; padding: 12px 24px; background-color: #28a745; color: white; text-decoration: none; border-radius: 5px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h2>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá th·ªëng B·∫£o tr√¨!</h2>
                    </div>
                    <div class="content">
                        <p>Xin ch√†o <strong>%s</strong>,</p>
                        <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi H·ªá th·ªëng Qu·∫£n l√Ω B·∫£o tr√¨ Thi·∫øt b·ªã! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.</p>
                        
                        <div class="credentials">
                            <h4>üìã Th√¥ng tin ƒëƒÉng nh·∫≠p:</h4>
                            <p><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> %s</p>
                            <p><strong>M·∫≠t kh·∫©u:</strong> %s</p>
                        </div>
                        
                        <h4>üöÄ B∆∞·ªõc ti·∫øp theo:</h4>
                        <ol>
                            <li>ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng</li>
                            <li>ƒê·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh</li>
                            <li>C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n</li>
                            <li>Kh√°m ph√° c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng</li>
                        </ol>
                        
                        <p>
                            <a href="http://localhost:8081/login" class="btn">ƒêƒÉng nh·∫≠p ngay</a>
                        </p>
                    </div>
                    <div class="footer">
                        <p>N·∫øu b·∫°n c√≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n h·ªá th·ªëng.</p>
                        <p>¬© 2024 H·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã</p>
                    </div>
                </div>
            </body>
            </html>
            """, tenNguoiDung, tenDangNhap, matKhau);
    }

    private String taoTemplateBaoCao(String noiDungBaoCao) {
        return String.format("""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>B√°o c√°o tu·∫ßn</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                    .header { background-color: #6f42c1; color: white; padding: 20px; text-align: center; }
                    .content { padding: 20px; background-color: #f8f9fa; }
                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }
                    .report-content { background-color: white; padding: 20px; border-radius: 5px; border-left: 4px solid #6f42c1; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h2>üìä B√°o c√°o Ho·∫°t ƒë·ªông B·∫£o tr√¨</h2>
                    </div>
                    <div class="content">
                        <div class="report-content">
                            %s
                        </div>
                        
                        <p>
                            <a href="http://localhost:8081/bao-cao" style="display: inline-block; padding: 10px 20px; background-color: #6f42c1; color: white; text-decoration: none; border-radius: 5px;">Xem b√°o c√°o chi ti·∫øt</a>
                        </p>
                    </div>
                    <div class="footer">
                        <p>B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông h√†ng tu·∫ßn.</p>
                        <p>¬© 2024 H·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã</p>
                    </div>
                </div>
            </body>
            </html>
            """, noiDungBaoCao.replace("\n", "<br>"));
    }

    /**
     * Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
     */
    public boolean kiemTraEmailHopLe(String email) {
        if (email == null || email.trim().isEmpty()) {
            return false;
        }

        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.matches(emailRegex);
    }

    /**
     * G·ª≠i email test
     */
    public boolean guiEmailTest(String toEmail) {
        if (!emailEnabled) {
            log.info("Email service is disabled. Cannot send test email.");
            return false;
        }

        try {
            String subject = "Test Email - H·ªá th·ªëng B·∫£o tr√¨";
            String content = "ƒê√¢y l√† email test t·ª´ h·ªá th·ªëng B·∫£o tr√¨ Thi·∫øt b·ªã.\n\n" +
                    "N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, nghƒ©a l√† h·ªá th·ªëng email ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.\n\n" +
                    "Th·ªùi gian g·ª≠i: " + java.time.LocalDateTime.now();

            guiEmailDonGian(toEmail, subject, content);
            log.info("G·ª≠i email test th√†nh c√¥ng ƒë·∫øn: {}", toEmail);
            return true;
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i email test ƒë·∫øn {}: {}", toEmail, e.getMessage());
            return false;
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i email service
     */
    public boolean kiemTraTrangThaiEmailService() {
        return emailEnabled;
    }

    /**
     * B·∫≠t/t·∫Øt email service
     */
    public void capNhatTrangThaiEmailService(boolean enabled) {
        this.emailEnabled = enabled;
        log.info("Email service ƒë√£ ƒë∆∞·ª£c {}", enabled ? "b·∫≠t" : "t·∫Øt");
    }
}